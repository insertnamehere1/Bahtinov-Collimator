<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAIkFAACJBQAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ABAAAADCAAAAwgAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAHgAAAOIAAADiAAAAHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAAEAAAACwAAABcAAAA7AAAAOwAAABcAAAAKwAAABAAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAFAAAANwAAAIkAAADJAAAA7QAAAPwAAAD/AAAA/wAAAPwAAADtAAAAygAAAIkAAAA3AAAABQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAKQAAAJoAAADtAAAA/wAAAPgAAADZAAAAxAAAAPYAAAD2AAAAxAAAANkAAAD4AAAA/wAA
        AO0AAACaAAAAKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAFIAAADYAAAA/wAAAOcAAACXAAAARwAAABgAAAAjAAAA4AAAAOAAAAAjAAAAGAAA
        AEYAAACXAAAA5wAAAP8AAADYAAAAUgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        MB/8AAA//wAA//+AAf//4Af///w////8P/8=
</value>
  </data>
</root>