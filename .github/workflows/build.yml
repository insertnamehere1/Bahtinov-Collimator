name: Build, Test, Signpath and Release (ClickOnce)

on: 
  push:
    branches: [ master ]
    tags: ['v*.*.*']   # releases are tag-driven
  pull_request:
    branches: [ master ]
    
  workflow_dispatch:

permissions:
  contents: write
  attestations: write
  id-token: write
  security-events: write

jobs:
  build:
    name: Build & Test (Windows)
    runs-on: windows-latest
    outputs:
      artifact_id: ${{ steps.upload-artifacts.outputs.artifact-id }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Sync ApplicationVersion + AssemblyInfo from tag (no new XML nodes)
        if: startsWith(github.ref, 'refs/tags/')
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
      
          $raw = $env:GITHUB_REF -replace '^refs/tags/', ''
          $version = $raw -replace '^v', ''
          if ($version -notmatch '^\d+\.\d+\.\d+(\.\d+)?$') { throw "Tag must be vX.Y.Z or vX.Y.Z.W. Got: '$raw'" }
          if ($version -notmatch '^\d+\.\d+\.\d+\.\d+$') { $version = "$version.0" }
          Write-Host "Version from tag: $version"
      
          # Update SkyCal.csproj
          $csproj = 'SkyCal.csproj'
          if (-not (Test-Path $csproj)) { throw "Missing $csproj" }
          $orig = Get-Content -Raw $csproj
          $pattern = '<ApplicationVersion(?<attrs>[^>]*)>\s*.*?\s*</ApplicationVersion>'
          if ($orig -notmatch $pattern) { throw "ApplicationVersion tag not found in $csproj" }
      
          $new = [regex]::Replace(
            $orig,
            $pattern,
            { param($m) "<ApplicationVersion$($m.Groups['attrs'].Value)>$version</ApplicationVersion>" },
            [System.Text.RegularExpressions.RegexOptions]::Singleline
          )
          if ($new -ne $orig) {
            Set-Content -Path $csproj -Value $new -Encoding UTF8
            Write-Host "Updated ApplicationVersion in $csproj"
          } else {
            throw "Regex matched but produced no change in $csproj"
          }
      
          # Update AssemblyInfo.cs
          $ai = 'Properties/AssemblyInfo.cs'
          if (-not (Test-Path $ai)) { throw "Missing $ai" }
          $origAi = Get-Content -Raw $ai
          $updAi = $origAi `
            -replace '\[assembly:\s*AssemblyVersion\(".*?"\)\]',     "[assembly: AssemblyVersion(`"$version`")]" `
            -replace '\[assembly:\s*AssemblyFileVersion\(".*?"\)\]', "[assembly: AssemblyFileVersion(`"$version`")]"
          if ($updAi -ne $origAi) {
            Set-Content -Path $ai -Value $updAi -Encoding UTF8
            Write-Host "Updated AssemblyVersion and AssemblyFileVersion in $ai"
          } else {
            Write-Host "No changes made to $ai"
          }
      
          git add -A
          git diff --staged -- . | Write-Host
          
      - name: Set up MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Set up NuGet
        uses: NuGet/setup-nuget@v2

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json', '**/packages.config') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Restore packages
        run: nuget restore "Bahtinov Collimator.sln"

      - name: Build Release
        run: >
          msbuild "Bahtinov Collimator.sln"
          /t:Rebuild
          /p:Configuration=Release
          /p:Deterministic=true
          /p:TreatWarningsAsErrors=true
          
      - name: ClickOnce Publish
        shell: pwsh
        run: >
          msbuild "SkyCal.csproj"
          /t:Publish
          /p:Configuration=Release
          /p:PublishProfile="Properties\PublishProfiles\ClickOnceProfile.pubxml"
          /p:PublishDir="$(Resolve-Path .)\out\clickonce\"

      - name: Rename ClickOnce setup.exe
        shell: pwsh
        run: |
          if (Test-Path "out\clickonce\setup.exe") {
              Rename-Item "out\clickonce\setup.exe" "SkyCal-Setup.exe" -Force
          }

      - name: Stage artifacts
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path artifacts | Out-Null
          Copy-Item "out\clickonce\*" "artifacts\" -Recurse -Force
          "@@ Build: $env:GITHUB_RUN_ID`nRef: $env:GITHUB_REF`nSHA: $env:GITHUB_SHA" |
            Out-File artifacts\BUILD-METADATA.txt -Encoding UTF8
            
      - name: Upload CI artifacts
        id: upload-artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output-${{ github.run_number }} 
          path: artifacts/

  codeql:
    name: CodeQL (C# .NET Framework)
    runs-on: windows-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp

      - name: Set up MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Set up NuGet
        uses: NuGet/setup-nuget@v2

      - name: Restore packages
        run: nuget restore "Bahtinov Collimator.sln"

      - name: Build solution for analysis
        run: msbuild "Bahtinov Collimator.sln" /t:Rebuild /p:Configuration=Release /p:Platform="Any CPU"

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  release:
    name: Release (tag only)
    needs: [build, codeql]  
    if: startsWith(github.ref, 'refs/tags/')  
    runs-on: windows-latest
    permissions:
      actions: read
      contents: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout master (target branch)
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - name: Prepare clean dist/
        shell: pwsh
        run: |
          if (Test-Path dist) { Remove-Item -Recurse -Force dist }
          New-Item -ItemType Directory -Force -Path dist | Out-Null
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output-${{ github.run_number }} 
          path: dist

      # Signpath - Submit once and wait for completion, then use outputs to download the signed ZIP
      - name: Submit to SignPath and wait
        id: sign
        uses: SignPath/github-action-submit-signing-request@v2
        with:
          api-token: ${{ secrets.SIGNPATH_API_TOKEN }}
          organization-id: ${{ secrets.SIGNPATH_ORG_ID }}
          project-slug: Bahtinov-Collimator
          signing-policy-slug: test-signing                             #<-- change to release-signing for production
          github-artifact-id: ${{ needs.build.outputs.artifact_id }}
          wait-for-completion: true
          output-artifact-directory: dist 

      - name: Generate SHA256 sums for dist
        shell: pwsh
        working-directory: dist
        run: |
          $out = "SHA256SUMS.txt"
          if (Test-Path $out) { Remove-Item $out -Force }
      
          Get-ChildItem -Recurse -File -Force |
            Where-Object { $_.Name -ne $out } |
            ForEach-Object {
              $hash = (Get-FileHash -Algorithm SHA256 -LiteralPath $_.FullName).Hash
              $rel  = (Resolve-Path -Relative $_.FullName)
              "$hash  $rel" | Out-File -FilePath $out -Append -Encoding ascii
            }

      - name: SBOM (SPDX)
        uses: anchore/sbom-action@v0
        with:
          path: .
          format: spdx-json
          output-file: sbom.spdx.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          dependency-snapshot: false
          upload-artifact: true
          upload-release-assets: true  
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: SkyCal ${{ github.ref_name }}
          body: |
            Source: ${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref_name }}
            Commit: ${{ github.sha }}
          files: |
            dist/SkyCal-Setup.exe
            dist/BUILD-METADATA.txt
            dist/SHA256SUMS.txt
            dist/sbom.spdx.json

      - name: Attest build provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: |
            dist/SkyCal-Setup.exe
            dist/BUILD-METADATA.txt
            dist/SHA256SUMS.txt
            dist/sbom.spdx.json

      - name: Update published/ from dist/
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $PSNativeCommandUseErrorActionPreference = $true
          Copy-Item "dist\*" "published\" -Recurse -Force
          New-Item -ItemType File -Force -Path "published\.nojekyll" | Out-Null
          Remove-Item -Recurse -Force "dist"
         
      - name: Commit and push changes to master
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git add -f published .nojekyll
          git commit -m "Update ClickOnce feed in /published" || echo "No changes to commit"
          git push origin master